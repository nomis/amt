#!/usr/bin/env python

import argparse
import os
from pprint import pprint
import sys

import requests

import amt.client
import amt.hostdb
import amt.wsman


def main():
    parser = argparse.ArgumentParser(description="amtredir lets you do redirection on AMT enabled Intel machines")

    parser.add_argument('-p', '--prompt-pass',
                        dest='prompt', action='store_true',
                        default=False,
                        help='Prompt for password, bypass database')
    parser.add_argument('server', metavar='name', help='server name')
    subparsers = parser.add_subparsers(dest='command')

    parser_kvm = subparsers.add_parser('kvm', help='KVM redirection')
    parser_kvm.add_argument('filename', metavar='filename', help='Unix socket filename')

    parser_ide = subparsers.add_parser('scsi', help='SCSI redirection')
    parser_ide_act = parser_ide.add_mutually_exclusive_group(required=True)
    parser_ide_act.add_argument('-r', '--reset', action='store_true', help='Activate at reset')
    parser_ide_act.add_argument('-g', '--graceful', action='store_true', help='Activate gracefully')
    parser_ide_act.add_argument('-n', '--now', action='store_true', help='Activate immediately')
    parser_ide.add_argument('-1', metavar='type', default='auto', choices=['auto', 'floppy', 'ls120', 'cd'], help='Device 1 (Floppy) type')
    parser_ide.add_argument('-A', metavar='filename', help='Device 1 (Floppy) filename')
    parser_ide.add_argument('-2', metavar='type', default='auto', choices=['auto', 'cd', 'floppy', 'ls120'], help='Device 2 (CD-ROM) type')
    parser_ide.add_argument('-B', metavar='filename', help='Device 2 (CD-ROM) filename')
    # Reserved: -3 to -6 and -C to -F

    args = parser.parse_args()
    db = amt.hostdb.HostDB()

    if args.prompt:
        host = args.server
        if sys.stdin.isatty():
            from getpass import getpass
            passwd = getpass()
        else:
            passwd = sys.stdin.readline().rstrip('\r\n')
    else:
        server = db.get_server(args.server)
        if not server:
            print('Server %s not found in hostdb' % args.server)
            return 1
        host = server['host']
        user = server['user']
        passwd = server['passwd']
        scheme = server['scheme']
        vncpasswd = server['vncpasswd']
        ca = server['ca']
        key = server['key']
        cert = server['cert']
        client = amt.client.Client(host, passwd, vncpasswd=vncpasswd,
                                   protocol=scheme, ca=ca,
                                   key=key, cert=cert, username=user)

    try:
        if args.command == 'kvm':
            with amt.client.KVM(client, args.filename) as kvm:
                print("Ready")
                kvm.loop()
        elif args.command == 'ide':
            if args.reset:
                activation = amt.client.IDEActivation.Reset
            elif args.graceful:
                activation = amt.client.IDEActivation.Graceful
            elif args.now:
                activation = amt.client.IDEActivation.Immediate

            with amt.client.IDEClient(client, activation, vars(args)["1"], args.A, vars(args)["2"], args.B) as ide:
                ide.start()
                ide.loop()
        else:
            parser.error("No command specified")
    except requests.exceptions.HTTPError as e:
        print('Error: %s' % e)


if __name__ == '__main__':
    sys.exit(main())
